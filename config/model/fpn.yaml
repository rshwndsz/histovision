# Feature pyramid networks
# Paper: https://arxiv.org/abs/1612.03144
model:
  name: fpn
  class: segmentation_models_pytorch.FPN
  params:
    # Name of classification model (without last dense layers) used as feature extractor to build segmentation model.
    encoder_name: resnet34
    # Number of stages used in decoder, larger depth - more features are generated.
    # e.g. for depth=3 encoder will generate list of features with following spatial shapes
    # [(H,W), (H/2, W/2), (H/4, W/4), (H/8, W/8)], so in general the deepest feature will have
    # spatial resolution (H/(2^depth), W/(2^depth)]
    encoder_depth: 5
    # One of [NULL => None or (random initialization), imagenet => (pre-training on ImageNet)]
    encoder_weights: imagenet
    # Number of convolution filters in Feature Pyramid of FPN_.
    decoder_pyramid_channels: 256
    # Number of convolution filters in segmentation head of FPN_.
    decoder_segmentation_channels: 128
    # Determines how to merge outputs inside FPN.
    # One of [add, cat]
    decoder_merge_policy: add
    # Spatial dropout rate in range (0, 1).
    decoder_dropout: 0.2
    # Number of channels in input
    # default => 3
    in_channels: 3
    # Number of classes at the output
    # output shape => [N C H W].
    classes: 2
    # Activation function used in .predict(x) method for inference.
    # One of [sigmoid, softmax2d, callable, NULL => None]
    activation: NULL
    # optional, final upsampling factor
    # default => 4 (to preserve input -> output spatial shape identity)
    upsampling: 4
    # if specified model will have additional classification auxiliary output
    # build on top of encoder, supported params:
    #    - classes (int): number of classes
    #    - pooling (str): one of 'max', 'avg'. Default is 'avg'.
    #    - dropout (float): dropout factor in [0, 1)
    #    - activation (str): activation function to apply "sigmoid"/"softmax" (could be None to return logits)
    aux_params: NULL
